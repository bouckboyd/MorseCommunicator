
MorseCommunicator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a4  080031a4  0000516c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031ac  080031ac  0000516c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080031b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000016c  08003320  0000516c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003320  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000516c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e7c  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001875  00000000  00000000  0000e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059e  00000000  00000000  0000ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dcd  00000000  00000000  0001056e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009735  00000000  00000000  0003133b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c87ec  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010325c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  001032a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00104f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000016c 	.word	0x2000016c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003070 	.word	0x08003070

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000170 	.word	0x20000170
 8000200:	08003070 	.word	0x08003070

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fb33 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f8eb 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f981 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f955 	bl	80007f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, message_prompt, sizeof(message_prompt), TRANSMISSION_TIMEOUT);
 8000546:	230a      	movs	r3, #10
 8000548:	2212      	movs	r2, #18
 800054a:	4965      	ldr	r1, [pc, #404]	@ (80006e0 <main+0x1b0>)
 800054c:	4865      	ldr	r0, [pc, #404]	@ (80006e4 <main+0x1b4>)
 800054e:	f001 fd47 	bl	8001fe0 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4964      	ldr	r1, [pc, #400]	@ (80006e8 <main+0x1b8>)
 8000556:	4863      	ldr	r0, [pc, #396]	@ (80006e4 <main+0x1b4>)
 8000558:	f001 fdcd 	bl	80020f6 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (begin_transmission == 1)
 800055c:	4b63      	ldr	r3, [pc, #396]	@ (80006ec <main+0x1bc>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d1fb      	bne.n	800055c <main+0x2c>
	{

	  HAL_UART_Transmit(&huart2, message_begin_transmit, sizeof(message_begin_transmit), TRANSMISSION_TIMEOUT);
 8000564:	230a      	movs	r3, #10
 8000566:	221a      	movs	r2, #26
 8000568:	4961      	ldr	r1, [pc, #388]	@ (80006f0 <main+0x1c0>)
 800056a:	485e      	ldr	r0, [pc, #376]	@ (80006e4 <main+0x1b4>)
 800056c:	f001 fd38 	bl	8001fe0 <HAL_UART_Transmit>
	  for (int i = 0; i < rx_idx; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e091      	b.n	800069a <main+0x16a>
	  {

	    if (rx_buffer[i] == ' ')
 8000576:	4a5f      	ldr	r2, [pc, #380]	@ (80006f4 <main+0x1c4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b20      	cmp	r3, #32
 8000580:	d104      	bne.n	800058c <main+0x5c>
		{
		  HAL_Delay(7 * DIT_LENGTH); // gap between words
 8000582:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8000586:	f000 fb7d 	bl	8000c84 <HAL_Delay>
 800058a:	e079      	b.n	8000680 <main+0x150>
		}
		else
		{

          uint8_t * code;
          if ((rx_buffer[i] >= 'A' && rx_buffer[i] <= 'Z') || (rx_buffer[i] >= 'a' && rx_buffer[i] <= 'z'))
 800058c:	4a59      	ldr	r2, [pc, #356]	@ (80006f4 <main+0x1c4>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b40      	cmp	r3, #64	@ 0x40
 8000596:	d905      	bls.n	80005a4 <main+0x74>
 8000598:	4a56      	ldr	r2, [pc, #344]	@ (80006f4 <main+0x1c4>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b5a      	cmp	r3, #90	@ 0x5a
 80005a2:	d90b      	bls.n	80005bc <main+0x8c>
 80005a4:	4a53      	ldr	r2, [pc, #332]	@ (80006f4 <main+0x1c4>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b60      	cmp	r3, #96	@ 0x60
 80005ae:	d921      	bls.n	80005f4 <main+0xc4>
 80005b0:	4a50      	ldr	r2, [pc, #320]	@ (80006f4 <main+0x1c4>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80005ba:	d81b      	bhi.n	80005f4 <main+0xc4>
          {
            code = letters[tolower(rx_buffer[i]) - 97]; // 97 is conversion from ascii A-Za-z to letters table idx
 80005bc:	4a4d      	ldr	r2, [pc, #308]	@ (80006f4 <main+0x1c4>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	70fb      	strb	r3, [r7, #3]
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a4b      	ldr	r2, [pc, #300]	@ (80006f8 <main+0x1c8>)
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f003 0303 	and.w	r3, r3, #3
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d102      	bne.n	80005de <main+0xae>
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	3320      	adds	r3, #32
 80005dc:	e000      	b.n	80005e0 <main+0xb0>
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80005e4:	4613      	mov	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	4413      	add	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4a43      	ldr	r2, [pc, #268]	@ (80006fc <main+0x1cc>)
 80005ee:	4413      	add	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	e018      	b.n	8000626 <main+0xf6>
          }
          else if (rx_buffer[i] >= '0' && rx_buffer[i] <= '9')
 80005f4:	4a3f      	ldr	r2, [pc, #252]	@ (80006f4 <main+0x1c4>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80005fe:	d948      	bls.n	8000692 <main+0x162>
 8000600:	4a3c      	ldr	r2, [pc, #240]	@ (80006f4 <main+0x1c4>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b39      	cmp	r3, #57	@ 0x39
 800060a:	d842      	bhi.n	8000692 <main+0x162>
          {
            code = numbers[rx_buffer[i] - 48]; // 48 is conversion from ascii 0-9 to numbers table idx
 800060c:	4a39      	ldr	r2, [pc, #228]	@ (80006f4 <main+0x1c4>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4a37      	ldr	r2, [pc, #220]	@ (8000700 <main+0x1d0>)
 8000622:	4413      	add	r3, r2
 8000624:	60bb      	str	r3, [r7, #8]
          }
          else // invalid character
          {
            continue;
          }
		  for (int j = 0; code[j] != '\0'; j++)
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e01f      	b.n	800066c <main+0x13c>
		  {
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2120      	movs	r1, #32
 8000630:	4834      	ldr	r0, [pc, #208]	@ (8000704 <main+0x1d4>)
 8000632:	f000 fe83 	bl	800133c <HAL_GPIO_WritePin>
		    if (code[j] == '1')
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b31      	cmp	r3, #49	@ 0x31
 8000640:	d104      	bne.n	800064c <main+0x11c>
		    {
		      HAL_Delay(DAH_LENGTH);
 8000642:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000646:	f000 fb1d 	bl	8000c84 <HAL_Delay>
 800064a:	e003      	b.n	8000654 <main+0x124>
		    }
		    else
		    {
		      HAL_Delay(DIT_LENGTH);
 800064c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000650:	f000 fb18 	bl	8000c84 <HAL_Delay>
		    }
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2120      	movs	r1, #32
 8000658:	482a      	ldr	r0, [pc, #168]	@ (8000704 <main+0x1d4>)
 800065a:	f000 fe6f 	bl	800133c <HAL_GPIO_WritePin>
		    HAL_Delay(DIT_LENGTH); // gap between dits/dahs
 800065e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000662:	f000 fb0f 	bl	8000c84 <HAL_Delay>
		  for (int j = 0; code[j] != '\0'; j++)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1d9      	bne.n	800062c <main+0xfc>
		  }
		  HAL_Delay(DAH_LENGTH); // gap between characters
 8000678:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800067c:	f000 fb02 	bl	8000c84 <HAL_Delay>

		}

		HAL_UART_Transmit(&huart2, &rx_buffer[i], 1, TRANSMISSION_TIMEOUT); // echo char to screen after transmission
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <main+0x1c4>)
 8000684:	1899      	adds	r1, r3, r2
 8000686:	230a      	movs	r3, #10
 8000688:	2201      	movs	r2, #1
 800068a:	4816      	ldr	r0, [pc, #88]	@ (80006e4 <main+0x1b4>)
 800068c:	f001 fca8 	bl	8001fe0 <HAL_UART_Transmit>
 8000690:	e000      	b.n	8000694 <main+0x164>
            continue;
 8000692:	bf00      	nop
	  for (int i = 0; i < rx_idx; i++)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <main+0x1d8>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4293      	cmp	r3, r2
 80006a4:	f6ff af67 	blt.w	8000576 <main+0x46>
      }
	  HAL_UART_Transmit(&huart2, message_end_transmit, sizeof(message_end_transmit), TRANSMISSION_TIMEOUT);
 80006a8:	230a      	movs	r3, #10
 80006aa:	221c      	movs	r2, #28
 80006ac:	4917      	ldr	r1, [pc, #92]	@ (800070c <main+0x1dc>)
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <main+0x1b4>)
 80006b0:	f001 fc96 	bl	8001fe0 <HAL_UART_Transmit>

	  // reset for next message
	  rx_idx = 0;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <main+0x1d8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	  transmission_ready = 0;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <main+0x1e0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
	  begin_transmission = 0;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <main+0x1bc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, message_prompt, sizeof(message_prompt), TRANSMISSION_TIMEOUT);
 80006c6:	230a      	movs	r3, #10
 80006c8:	2212      	movs	r2, #18
 80006ca:	4905      	ldr	r1, [pc, #20]	@ (80006e0 <main+0x1b0>)
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <main+0x1b4>)
 80006ce:	f001 fc87 	bl	8001fe0 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	4904      	ldr	r1, [pc, #16]	@ (80006e8 <main+0x1b8>)
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <main+0x1b4>)
 80006d8:	f001 fd0d 	bl	80020f6 <HAL_UART_Receive_IT>
	if (begin_transmission == 1)
 80006dc:	e73e      	b.n	800055c <main+0x2c>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000188 	.word	0x20000188
 80006e8:	200001d0 	.word	0x200001d0
 80006ec:	2000023a 	.word	0x2000023a
 80006f0:	20000050 	.word	0x20000050
 80006f4:	200001d4 	.word	0x200001d4
 80006f8:	080030a0 	.word	0x080030a0
 80006fc:	20000088 	.word	0x20000088
 8000700:	20000124 	.word	0x20000124
 8000704:	40020000 	.word	0x40020000
 8000708:	20000238 	.word	0x20000238
 800070c:	2000006c 	.word	0x2000006c
 8000710:	20000239 	.word	0x20000239

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	@ 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fc78 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <SystemClock_Config+0xd4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a29      	ldr	r2, [pc, #164]	@ (80007e8 <SystemClock_Config+0xd4>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000760:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <SystemClock_Config+0xd8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <SystemClock_Config+0xd8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000790:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f92e 	bl	8001a04 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ae:	f000 f903 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fdce 	bl	8001370 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007da:	f000 f8ed 	bl	80009b8 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	@ 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f001 fb8a 	bl	8001f40 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f8c1 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000188 	.word	0x20000188
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a2c      	ldr	r2, [pc, #176]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	4812      	ldr	r0, [pc, #72]	@ (8000918 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 fd34 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_GPIO_Init+0xd8>)
 80008ec:	f000 fb92 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_GPIO_Init+0xd4>)
 8000908:	f000 fb84 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020800 	.word	0x40020800

08000920 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  if (transmission_ready || rx_data[0] == '\r')
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_UART_RxCpltCallback+0x7c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d103      	bne.n	8000938 <HAL_UART_RxCpltCallback+0x18>
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_UART_RxCpltCallback+0x80>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b0d      	cmp	r3, #13
 8000936:	d103      	bne.n	8000940 <HAL_UART_RxCpltCallback+0x20>
  {

	begin_transmission = 1; // triggers LED transmission code in main while loop
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <HAL_UART_RxCpltCallback+0x84>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e029      	b.n	8000994 <HAL_UART_RxCpltCallback+0x74>
  }
  else
  {

	// adds received character to buffer
    rx_buffer[rx_idx] = rx_data[0];
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_UART_RxCpltCallback+0x88>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_UART_RxCpltCallback+0x80>)
 8000948:	7819      	ldrb	r1, [r3, #0]
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <HAL_UART_RxCpltCallback+0x8c>)
 800094c:	5499      	strb	r1, [r3, r2]
    HAL_UART_Transmit(&huart2, &rx_buffer[rx_idx], 1, TRANSMISSION_TIMEOUT);
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <HAL_UART_RxCpltCallback+0x88>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_UART_RxCpltCallback+0x8c>)
 8000956:	18d1      	adds	r1, r2, r3
 8000958:	230a      	movs	r3, #10
 800095a:	2201      	movs	r2, #1
 800095c:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <HAL_UART_RxCpltCallback+0x90>)
 800095e:	f001 fb3f 	bl	8001fe0 <HAL_UART_Transmit>
    rx_idx++;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_UART_RxCpltCallback+0x88>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_UART_RxCpltCallback+0x88>)
 800096c:	701a      	strb	r2, [r3, #0]

    if (rx_idx == MAX_TRANSMISSION_SIZE)
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_UART_RxCpltCallback+0x88>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b64      	cmp	r3, #100	@ 0x64
 8000974:	d108      	bne.n	8000988 <HAL_UART_RxCpltCallback+0x68>
    {
      HAL_UART_Transmit(&huart2, message_buffer_full, sizeof(message_buffer_full), TRANSMISSION_TIMEOUT);
 8000976:	230a      	movs	r3, #10
 8000978:	2239      	movs	r2, #57	@ 0x39
 800097a:	490e      	ldr	r1, [pc, #56]	@ (80009b4 <HAL_UART_RxCpltCallback+0x94>)
 800097c:	480c      	ldr	r0, [pc, #48]	@ (80009b0 <HAL_UART_RxCpltCallback+0x90>)
 800097e:	f001 fb2f 	bl	8001fe0 <HAL_UART_Transmit>
      transmission_ready = 1;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_UART_RxCpltCallback+0x7c>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	4905      	ldr	r1, [pc, #20]	@ (80009a0 <HAL_UART_RxCpltCallback+0x80>)
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <HAL_UART_RxCpltCallback+0x90>)
 800098e:	f001 fbb2 	bl	80020f6 <HAL_UART_Receive_IT>

  }

}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000239 	.word	0x20000239
 80009a0:	200001d0 	.word	0x200001d0
 80009a4:	2000023a 	.word	0x2000023a
 80009a8:	20000238 	.word	0x20000238
 80009ac:	200001d4 	.word	0x200001d4
 80009b0:	20000188 	.word	0x20000188
 80009b4:	20000014 	.word	0x20000014

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fa32 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d133      	bne.n	8000a9e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_UART_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <HAL_UART_MspInit+0x9c>)
 8000a8a:	f000 fac3 	bl	8001014 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2026      	movs	r0, #38	@ 0x26
 8000a94:	f000 f9f5 	bl	8000e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a98:	2026      	movs	r0, #38	@ 0x26
 8000a9a:	f000 fa0e 	bl	8000eba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f89b 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USART2_IRQHandler+0x10>)
 8000b1a:	f001 fb11 	bl	8002140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000188 	.word	0x20000188

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f002 fa55 	bl	8003028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fcd7 	bl	8000530 <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000b90:	080031b4 	.word	0x080031b4
  ldr r2, =_sbss
 8000b94:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000b98:	20000240 	.word	0x20000240

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f94f 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fef6 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f967 	bl	8000ed6 <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 f92f 	bl	8000e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000160 	.word	0x20000160
 8000c3c:	20000168 	.word	0x20000168
 8000c40:	20000164 	.word	0x20000164

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000168 	.word	0x20000168
 8000c68:	2000023c 	.word	0x2000023c

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000023c 	.word	0x2000023c

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000168 	.word	0x20000168

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff29 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff3e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff8e 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff31 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffa2 	bl	8000e28 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff feb6 	bl	8000c6c <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d008      	beq.n	8000f20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e052      	b.n	8000fc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0216 	bic.w	r2, r2, #22
 8000f2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <HAL_DMA_Abort+0x62>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0208 	bic.w	r2, r2, #8
 8000f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	e013      	b.n	8000f9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f72:	f7ff fe7b 	bl	8000c6c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d90c      	bls.n	8000f9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2220      	movs	r2, #32
 8000f84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e015      	b.n	8000fc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e4      	bne.n	8000f72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fac:	223f      	movs	r2, #63	@ 0x3f
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d004      	beq.n	8000fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00c      	b.n	8001006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e165      	b.n	80012fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 8154 	bne.w	80012f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80ae 	beq.w	80012f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5d      	ldr	r3, [pc, #372]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a58      	ldr	r2, [pc, #352]	@ (8001318 <HAL_GPIO_Init+0x304>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x308>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x310>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x20a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x206>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <HAL_GPIO_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x202>
 8001212:	2306      	movs	r3, #6
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001216:	2307      	movs	r3, #7
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	@ (8001318 <HAL_GPIO_Init+0x304>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_GPIO_Init+0x324>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a31      	ldr	r2, [pc, #196]	@ (8001338 <HAL_GPIO_Init+0x324>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x324>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x324>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae96 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0cc      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d90c      	bls.n	80013ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b65      	ldr	r3, [pc, #404]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0b8      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c4:	4b59      	ldr	r3, [pc, #356]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a58      	ldr	r2, [pc, #352]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e8:	4b50      	ldr	r3, [pc, #320]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	494d      	ldr	r1, [pc, #308]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d044      	beq.n	8001490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d119      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e07f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d003      	beq.n	800142e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	2b03      	cmp	r3, #3
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e067      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144e:	4b37      	ldr	r3, [pc, #220]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f023 0203 	bic.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4934      	ldr	r1, [pc, #208]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fc04 	bl	8000c6c <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	e00a      	b.n	800147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001468:	f7ff fc00 	bl	8000c6c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 020c 	and.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	429a      	cmp	r2, r3
 800148e:	d1eb      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d20c      	bcs.n	80014b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e032      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4916      	ldr	r1, [pc, #88]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	490e      	ldr	r1, [pc, #56]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014f6:	f000 f855 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	490a      	ldr	r1, [pc, #40]	@ (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	5ccb      	ldrb	r3, [r1, r3]
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb64 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00
 800152c:	40023800 	.word	0x40023800
 8001530:	08003088 	.word	0x08003088
 8001534:	20000160 	.word	0x20000160
 8001538:	20000164 	.word	0x20000164

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_RCC_GetHCLKFreq+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000160 	.word	0x20000160

08001554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001558:	f7ff fff0 	bl	800153c <HAL_RCC_GetHCLKFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	0a9b      	lsrs	r3, r3, #10
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4903      	ldr	r1, [pc, #12]	@ (8001578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800156a:	5ccb      	ldrb	r3, [r1, r3]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	08003098 	.word	0x08003098

0800157c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001580:	f7ff ffdc 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0b5b      	lsrs	r3, r3, #13
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	4903      	ldr	r1, [pc, #12]	@ (80015a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	08003098 	.word	0x08003098

080015a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a8:	b0ae      	sub	sp, #184	@ 0xb8
 80015aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ca:	4bcb      	ldr	r3, [pc, #812]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	f200 8206 	bhi.w	80019e4 <HAL_RCC_GetSysClockFreq+0x440>
 80015d8:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001615 	.word	0x08001615
 80015e4:	080019e5 	.word	0x080019e5
 80015e8:	080019e5 	.word	0x080019e5
 80015ec:	080019e5 	.word	0x080019e5
 80015f0:	0800161d 	.word	0x0800161d
 80015f4:	080019e5 	.word	0x080019e5
 80015f8:	080019e5 	.word	0x080019e5
 80015fc:	080019e5 	.word	0x080019e5
 8001600:	08001625 	.word	0x08001625
 8001604:	080019e5 	.word	0x080019e5
 8001608:	080019e5 	.word	0x080019e5
 800160c:	080019e5 	.word	0x080019e5
 8001610:	08001815 	.word	0x08001815
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4bb9      	ldr	r3, [pc, #740]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800161a:	e1e7      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161c:	4bb8      	ldr	r3, [pc, #736]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x35c>)
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001622:	e1e3      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001624:	4bb4      	ldr	r3, [pc, #720]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001630:	4bb1      	ldr	r3, [pc, #708]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d071      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163c:	4bae      	ldr	r3, [pc, #696]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	2200      	movs	r2, #0
 8001644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001648:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800164c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800165e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001662:	4622      	mov	r2, r4
 8001664:	462b      	mov	r3, r5
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0159      	lsls	r1, r3, #5
 8001670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001674:	0150      	lsls	r0, r2, #5
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4621      	mov	r1, r4
 800167c:	1a51      	subs	r1, r2, r1
 800167e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001680:	4629      	mov	r1, r5
 8001682:	eb63 0301 	sbc.w	r3, r3, r1
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001694:	4649      	mov	r1, r9
 8001696:	018b      	lsls	r3, r1, #6
 8001698:	4641      	mov	r1, r8
 800169a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169e:	4641      	mov	r1, r8
 80016a0:	018a      	lsls	r2, r1, #6
 80016a2:	4641      	mov	r1, r8
 80016a4:	1a51      	subs	r1, r2, r1
 80016a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016a8:	4649      	mov	r1, r9
 80016aa:	eb63 0301 	sbc.w	r3, r3, r1
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016bc:	4649      	mov	r1, r9
 80016be:	00cb      	lsls	r3, r1, #3
 80016c0:	4641      	mov	r1, r8
 80016c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016c6:	4641      	mov	r1, r8
 80016c8:	00ca      	lsls	r2, r1, #3
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	4622      	mov	r2, r4
 80016d2:	189b      	adds	r3, r3, r2
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016d6:	462b      	mov	r3, r5
 80016d8:	460a      	mov	r2, r1
 80016da:	eb42 0303 	adc.w	r3, r2, r3
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016ec:	4629      	mov	r1, r5
 80016ee:	024b      	lsls	r3, r1, #9
 80016f0:	4621      	mov	r1, r4
 80016f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016f6:	4621      	mov	r1, r4
 80016f8:	024a      	lsls	r2, r1, #9
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001702:	2200      	movs	r2, #0
 8001704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001708:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800170c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001710:	f7fe fd78 	bl	8000204 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800171e:	e067      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4b75      	ldr	r3, [pc, #468]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800172c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001730:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001738:	67bb      	str	r3, [r7, #120]	@ 0x78
 800173a:	2300      	movs	r3, #0
 800173c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800173e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001742:	4622      	mov	r2, r4
 8001744:	462b      	mov	r3, r5
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	f04f 0100 	mov.w	r1, #0
 800174e:	0159      	lsls	r1, r3, #5
 8001750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001754:	0150      	lsls	r0, r2, #5
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4621      	mov	r1, r4
 800175c:	1a51      	subs	r1, r2, r1
 800175e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001760:	4629      	mov	r1, r5
 8001762:	eb63 0301 	sbc.w	r3, r3, r1
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001774:	4649      	mov	r1, r9
 8001776:	018b      	lsls	r3, r1, #6
 8001778:	4641      	mov	r1, r8
 800177a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177e:	4641      	mov	r1, r8
 8001780:	018a      	lsls	r2, r1, #6
 8001782:	4641      	mov	r1, r8
 8001784:	ebb2 0a01 	subs.w	sl, r2, r1
 8001788:	4649      	mov	r1, r9
 800178a:	eb63 0b01 	sbc.w	fp, r3, r1
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800179a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800179e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a2:	4692      	mov	sl, r2
 80017a4:	469b      	mov	fp, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	eb1a 0303 	adds.w	r3, sl, r3
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	462b      	mov	r3, r5
 80017b0:	eb4b 0303 	adc.w	r3, fp, r3
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017c2:	4629      	mov	r1, r5
 80017c4:	028b      	lsls	r3, r1, #10
 80017c6:	4621      	mov	r1, r4
 80017c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017cc:	4621      	mov	r1, r4
 80017ce:	028a      	lsls	r2, r1, #10
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017d8:	2200      	movs	r2, #0
 80017da:	673b      	str	r3, [r7, #112]	@ 0x70
 80017dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80017de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017e2:	f7fe fd0f 	bl	8000204 <__aeabi_uldivmod>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4613      	mov	r3, r2
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017f0:	4b41      	ldr	r3, [pc, #260]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001812:	e0eb      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001820:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d06b      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	2200      	movs	r2, #0
 8001834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800183a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001840:	2300      	movs	r3, #0
 8001842:	667b      	str	r3, [r7, #100]	@ 0x64
 8001844:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001848:	4622      	mov	r2, r4
 800184a:	462b      	mov	r3, r5
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0159      	lsls	r1, r3, #5
 8001856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185a:	0150      	lsls	r0, r2, #5
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4621      	mov	r1, r4
 8001862:	1a51      	subs	r1, r2, r1
 8001864:	61b9      	str	r1, [r7, #24]
 8001866:	4629      	mov	r1, r5
 8001868:	eb63 0301 	sbc.w	r3, r3, r1
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800187a:	4659      	mov	r1, fp
 800187c:	018b      	lsls	r3, r1, #6
 800187e:	4651      	mov	r1, sl
 8001880:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001884:	4651      	mov	r1, sl
 8001886:	018a      	lsls	r2, r1, #6
 8001888:	4651      	mov	r1, sl
 800188a:	ebb2 0801 	subs.w	r8, r2, r1
 800188e:	4659      	mov	r1, fp
 8001890:	eb63 0901 	sbc.w	r9, r3, r1
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a8:	4690      	mov	r8, r2
 80018aa:	4699      	mov	r9, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	eb18 0303 	adds.w	r3, r8, r3
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	462b      	mov	r3, r5
 80018b6:	eb49 0303 	adc.w	r3, r9, r3
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018c8:	4629      	mov	r1, r5
 80018ca:	024b      	lsls	r3, r1, #9
 80018cc:	4621      	mov	r1, r4
 80018ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d2:	4621      	mov	r1, r4
 80018d4:	024a      	lsls	r2, r1, #9
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018de:	2200      	movs	r2, #0
 80018e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018e8:	f7fe fc8c 	bl	8000204 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018f6:	e065      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x420>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	00f42400 	.word	0x00f42400
 8001900:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001904:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x458>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	2200      	movs	r2, #0
 800190c:	4618      	mov	r0, r3
 800190e:	4611      	mov	r1, r2
 8001910:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001914:	653b      	str	r3, [r7, #80]	@ 0x50
 8001916:	2300      	movs	r3, #0
 8001918:	657b      	str	r3, [r7, #84]	@ 0x54
 800191a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800191e:	4642      	mov	r2, r8
 8001920:	464b      	mov	r3, r9
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	0159      	lsls	r1, r3, #5
 800192c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001930:	0150      	lsls	r0, r2, #5
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4641      	mov	r1, r8
 8001938:	1a51      	subs	r1, r2, r1
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	4649      	mov	r1, r9
 800193e:	eb63 0301 	sbc.w	r3, r3, r1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001950:	4659      	mov	r1, fp
 8001952:	018b      	lsls	r3, r1, #6
 8001954:	4651      	mov	r1, sl
 8001956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195a:	4651      	mov	r1, sl
 800195c:	018a      	lsls	r2, r1, #6
 800195e:	4651      	mov	r1, sl
 8001960:	1a54      	subs	r4, r2, r1
 8001962:	4659      	mov	r1, fp
 8001964:	eb63 0501 	sbc.w	r5, r3, r1
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	00eb      	lsls	r3, r5, #3
 8001972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001976:	00e2      	lsls	r2, r4, #3
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	4643      	mov	r3, r8
 800197e:	18e3      	adds	r3, r4, r3
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	464b      	mov	r3, r9
 8001984:	eb45 0303 	adc.w	r3, r5, r3
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001996:	4629      	mov	r1, r5
 8001998:	028b      	lsls	r3, r1, #10
 800199a:	4621      	mov	r1, r4
 800199c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a0:	4621      	mov	r1, r4
 80019a2:	028a      	lsls	r2, r1, #10
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ac:	2200      	movs	r2, #0
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b6:	f7fe fc25 	bl	8000204 <__aeabi_uldivmod>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4613      	mov	r3, r2
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019c4:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x458>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0f1b      	lsrs	r3, r3, #28
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80019d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019e2:	e003      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	37b8      	adds	r7, #184	@ 0xb8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	00f42400 	.word	0x00f42400

08001a04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e28d      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8083 	beq.w	8001b2a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a24:	4b94      	ldr	r3, [pc, #592]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d019      	beq.n	8001a64 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a30:	4b91      	ldr	r3, [pc, #580]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a48:	d00c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b88      	ldr	r3, [pc, #544]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b84      	ldr	r3, [pc, #528]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x124>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d157      	bne.n	8001b28 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e25a      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x90>
 8001a86:	4b7c      	ldr	r3, [pc, #496]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xcc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0xb4>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a72      	ldr	r2, [pc, #456]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xcc>
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a6e      	ldr	r2, [pc, #440]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f8c8 	bl	8000c6c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f8c4 	bl	8000c6c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e21f      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b61      	ldr	r3, [pc, #388]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xdc>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f8b4 	bl	8000c6c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f8b0 	bl	8000c6c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	@ 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e20b      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b57      	ldr	r3, [pc, #348]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x104>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06f      	beq.n	8001c16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b36:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d017      	beq.n	8001b72 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x186>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1d3      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4937      	ldr	r1, [pc, #220]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f85d 	bl	8000c6c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f859 	bl	8000c6c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1b4      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4925      	ldr	r1, [pc, #148]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f83c 	bl	8000c6c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f838 	bl	8000c6c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e193      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d036      	beq.n	8001c90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f81c 	bl	8000c6c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff f818 	bl	8000c6c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e173      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x234>
 8001c56:	e01b      	b.n	8001c90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f805 	bl	8000c6c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e00e      	b.n	8001c84 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff f801 	bl	8000c6c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d907      	bls.n	8001c84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e15c      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	42470000 	.word	0x42470000
 8001c80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b8a      	ldr	r3, [pc, #552]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ea      	bne.n	8001c66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8097 	beq.w	8001dcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b83      	ldr	r3, [pc, #524]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b79      	ldr	r3, [pc, #484]	@ (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cda:	4b76      	ldr	r3, [pc, #472]	@ (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	@ (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe ffc1 	bl	8000c6c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7fe ffbd 	bl	8000c6c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e118      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x31e>
 8001d14:	4b66      	ldr	r3, [pc, #408]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a65      	ldr	r2, [pc, #404]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x358>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x340>
 8001d2a:	4b61      	ldr	r3, [pc, #388]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a60      	ldr	r2, [pc, #384]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d36:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x358>
 8001d44:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a59      	ldr	r2, [pc, #356]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d54:	4a56      	ldr	r2, [pc, #344]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7fe ff82 	bl	8000c6c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ff7e 	bl	8000c6c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0d7      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x368>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7fe ff6c 	bl	8000c6c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7fe ff68 	bl	8000c6c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0c1      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dae:	4b40      	ldr	r3, [pc, #256]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80ad 	beq.w	8001f30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd6:	4b36      	ldr	r3, [pc, #216]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d060      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d145      	bne.n	8001e76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff3c 	bl	8000c6c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ff38 	bl	8000c6c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e093      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	019b      	lsls	r3, r3, #6
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	071b      	lsls	r3, r3, #28
 8001e42:	491b      	ldr	r1, [pc, #108]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe ff0d 	bl	8000c6c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7fe ff09 	bl	8000c6c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e064      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x452>
 8001e74:	e05c      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fef6 	bl	8000c6c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fef2 	bl	8000c6c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04d      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x480>
 8001ea2:	e045      	b.n	8001f30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e040      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <HAL_RCC_OscConfig+0x538>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d030      	beq.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d129      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d122      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eec:	4013      	ands	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d119      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	3b01      	subs	r3, #1
 8001f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10f      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e042      	b.n	8001fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fd54 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fdd3 	bl	8002b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d175      	bne.n	80020ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_UART_Transmit+0x2c>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e06e      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2221      	movs	r2, #33	@ 0x21
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800201e:	f7fe fe25 	bl	8000c6c <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	88fa      	ldrh	r2, [r7, #6]
 8002028:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002038:	d108      	bne.n	800204c <HAL_UART_Transmit+0x6c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d104      	bne.n	800204c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e003      	b.n	8002054 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002054:	e02e      	b.n	80020b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	2180      	movs	r1, #128	@ 0x80
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb37 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e03a      	b.n	80020ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800208c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3302      	adds	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	e007      	b.n	80020a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1cb      	bne.n	8002056 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2140      	movs	r1, #64	@ 0x40
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fb03 	bl	80026d4 <UART_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	4613      	mov	r3, r2
 8002102:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	d112      	bne.n	8002136 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_UART_Receive_IT+0x26>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e00b      	b.n	8002138 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	461a      	mov	r2, r3
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fb2a 	bl	8002786 <UART_Start_Receive_IT>
 8002132:	4603      	mov	r3, r0
 8002134:	e000      	b.n	8002138 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ba      	sub	sp, #232	@ 0xe8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800217e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_UART_IRQHandler+0x66>
 8002192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fc07 	bl	80029b2 <UART_Receive_IT>
      return;
 80021a4:	e273      	b.n	800268e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80de 	beq.w	800236c <HAL_UART_IRQHandler+0x22c>
 80021b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80d1 	beq.w	800236c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_UART_IRQHandler+0xae>
 80021d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_UART_IRQHandler+0xd2>
 80021fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_UART_IRQHandler+0xf6>
 800221e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d011      	beq.n	8002266 <HAL_UART_IRQHandler+0x126>
 8002242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800224e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f043 0208 	orr.w	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 820a 	beq.w	8002684 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_UART_IRQHandler+0x14e>
 800227c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fb92 	bl	80029b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_UART_IRQHandler+0x17a>
 80022b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04f      	beq.n	800235a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa9d 	bl	80027fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ca:	2b40      	cmp	r3, #64	@ 0x40
 80022cc:	d141      	bne.n	8002352 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3314      	adds	r3, #20
 80022f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800230a:	e841 2300 	strex	r3, r2, [r1]
 800230e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1d9      	bne.n	80022ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d013      	beq.n	800234a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002326:	4a8a      	ldr	r2, [pc, #552]	@ (8002550 <HAL_UART_IRQHandler+0x410>)
 8002328:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fe4d 	bl	8000fce <HAL_DMA_Abort_IT>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002344:	4610      	mov	r0, r2
 8002346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	e00e      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9ac 	bl	80026a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	e00a      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f9a8 	bl	80026a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e006      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9a4 	bl	80026a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002366:	e18d      	b.n	8002684 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002368:	bf00      	nop
    return;
 800236a:	e18b      	b.n	8002684 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 8167 	bne.w	8002644 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8160 	beq.w	8002644 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8159 	beq.w	8002644 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b40      	cmp	r3, #64	@ 0x40
 80023b4:	f040 80ce 	bne.w	8002554 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a9 	beq.w	8002520 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f080 80a2 	bcs.w	8002520 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ee:	f000 8088 	beq.w	8002502 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002408:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800240c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800241e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800242a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1d9      	bne.n	80023f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800244e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3314      	adds	r3, #20
 800245e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002462:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002466:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002468:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800246a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800246e:	e841 2300 	strex	r3, r2, [r1]
 8002472:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e1      	bne.n	800243e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	3314      	adds	r3, #20
 8002480:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800248a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800248c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3314      	adds	r3, #20
 800249a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800249e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024a6:	e841 2300 	strex	r3, r2, [r1]
 80024aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80024ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1e3      	bne.n	800247a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ca:	e853 3f00 	ldrex	r3, [r3]
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024d2:	f023 0310 	bic.w	r3, r3, #16
 80024d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e3      	bne.n	80024c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fcf6 	bl	8000eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002510:	b29b      	uxth	r3, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f8cf 	bl	80026bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800251e:	e0b3      	b.n	8002688 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002528:	429a      	cmp	r2, r3
 800252a:	f040 80ad 	bne.w	8002688 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002538:	f040 80a6 	bne.w	8002688 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8b7 	bl	80026bc <HAL_UARTEx_RxEventCallback>
      return;
 800254e:	e09b      	b.n	8002688 <HAL_UART_IRQHandler+0x548>
 8002550:	080028c1 	.word	0x080028c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800255c:	b29b      	uxth	r3, r3
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 808e 	beq.w	800268c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8089 	beq.w	800268c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800259e:	647a      	str	r2, [r7, #68]	@ 0x44
 80025a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025a6:	e841 2300 	strex	r3, r2, [r1]
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e3      	bne.n	800257a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	e853 3f00 	ldrex	r3, [r3]
 80025c0:	623b      	str	r3, [r7, #32]
   return(result);
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1e3      	bne.n	80025b2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	330c      	adds	r3, #12
 80025fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	e853 3f00 	ldrex	r3, [r3]
 8002606:	60fb      	str	r3, [r7, #12]
   return(result);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0310 	bic.w	r3, r3, #16
 800260e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800261c:	61fa      	str	r2, [r7, #28]
 800261e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	e841 2300 	strex	r3, r2, [r1]
 8002628:	617b      	str	r3, [r7, #20]
   return(result);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e3      	bne.n	80025f8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f83d 	bl	80026bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002642:	e023      	b.n	800268c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <HAL_UART_IRQHandler+0x524>
 8002650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f940 	bl	80028e2 <UART_Transmit_IT>
    return;
 8002662:	e014      	b.n	800268e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_UART_IRQHandler+0x54e>
 8002670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f980 	bl	8002982 <UART_EndTransmit_IT>
    return;
 8002682:	e004      	b.n	800268e <HAL_UART_IRQHandler+0x54e>
    return;
 8002684:	bf00      	nop
 8002686:	e002      	b.n	800268e <HAL_UART_IRQHandler+0x54e>
      return;
 8002688:	bf00      	nop
 800268a:	e000      	b.n	800268e <HAL_UART_IRQHandler+0x54e>
      return;
 800268c:	bf00      	nop
  }
}
 800268e:	37e8      	adds	r7, #232	@ 0xe8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e4:	e03b      	b.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ec:	d037      	beq.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe fabd 	bl	8000c6c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <UART_WaitOnFlagUntilTimeout+0x30>
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e03a      	b.n	800277e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d023      	beq.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b80      	cmp	r3, #128	@ 0x80
 800271a:	d020      	beq.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b40      	cmp	r3, #64	@ 0x40
 8002720:	d01d      	beq.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d116      	bne.n	800275e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f857 	bl	80027fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2208      	movs	r2, #8
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4013      	ands	r3, r2
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	429a      	cmp	r2, r3
 800277a:	d0b4      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	4613      	mov	r3, r2
 8002792:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2222      	movs	r2, #34	@ 0x22
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b095      	sub	sp, #84	@ 0x54
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002822:	643a      	str	r2, [r7, #64]	@ 0x40
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e5      	bne.n	8002802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	61fb      	str	r3, [r7, #28]
   return(result);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800285c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e5      	bne.n	8002836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	2b01      	cmp	r3, #1
 8002870:	d119      	bne.n	80028a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	60bb      	str	r3, [r7, #8]
   return(result);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0310 	bic.w	r3, r3, #16
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002892:	61ba      	str	r2, [r7, #24]
 8002894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	613b      	str	r3, [r7, #16]
   return(result);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e5      	bne.n	8002872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028b4:	bf00      	nop
 80028b6:	3754      	adds	r7, #84	@ 0x54
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fee7 	bl	80026a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b21      	cmp	r3, #33	@ 0x21
 80028f4:	d13e      	bne.n	8002974 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028fe:	d114      	bne.n	800292a <UART_Transmit_IT+0x48>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d110      	bne.n	800292a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800291c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	1c9a      	adds	r2, r3, #2
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	621a      	str	r2, [r3, #32]
 8002928:	e008      	b.n	800293c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	1c59      	adds	r1, r3, #1
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6211      	str	r1, [r2, #32]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4619      	mov	r1, r3
 800294a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10f      	bne.n	8002970 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800295e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800296e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002998:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe76 	bl	8002694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08c      	sub	sp, #48	@ 0x30
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b22      	cmp	r3, #34	@ 0x22
 80029cc:	f040 80aa 	bne.w	8002b24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d8:	d115      	bne.n	8002a06 <UART_Receive_IT+0x54>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a04:	e024      	b.n	8002a50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a14:	d007      	beq.n	8002a26 <UART_Receive_IT+0x74>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <UART_Receive_IT+0x82>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e008      	b.n	8002a46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d15d      	bne.n	8002b20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0220 	bic.w	r2, r2, #32
 8002a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d135      	bne.n	8002b16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad0:	623a      	str	r2, [r7, #32]
 8002ad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad4:	69f9      	ldr	r1, [r7, #28]
 8002ad6:	6a3a      	ldr	r2, [r7, #32]
 8002ad8:	e841 2300 	strex	r3, r2, [r1]
 8002adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e5      	bne.n	8002ab0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d10a      	bne.n	8002b08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fdd4 	bl	80026bc <HAL_UARTEx_RxEventCallback>
 8002b14:	e002      	b.n	8002b1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ff02 	bl	8000920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e002      	b.n	8002b26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3730      	adds	r7, #48	@ 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b0c0      	sub	sp, #256	@ 0x100
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	68d9      	ldr	r1, [r3, #12]
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	ea40 0301 	orr.w	r3, r0, r1
 8002b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b88:	f021 010c 	bic.w	r1, r1, #12
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b96:	430b      	orrs	r3, r1
 8002b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	6999      	ldr	r1, [r3, #24]
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	ea40 0301 	orr.w	r3, r0, r1
 8002bb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b8f      	ldr	r3, [pc, #572]	@ (8002dfc <UART_SetConfig+0x2cc>)
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d005      	beq.n	8002bd0 <UART_SetConfig+0xa0>
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <UART_SetConfig+0x2d0>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d104      	bne.n	8002bda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd0:	f7fe fcd4 	bl	800157c <HAL_RCC_GetPCLK2Freq>
 8002bd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bd8:	e003      	b.n	8002be2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bda:	f7fe fcbb 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8002bde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bec:	f040 810c 	bne.w	8002e08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c02:	4622      	mov	r2, r4
 8002c04:	462b      	mov	r3, r5
 8002c06:	1891      	adds	r1, r2, r2
 8002c08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c0a:	415b      	adcs	r3, r3
 8002c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c12:	4621      	mov	r1, r4
 8002c14:	eb12 0801 	adds.w	r8, r2, r1
 8002c18:	4629      	mov	r1, r5
 8002c1a:	eb43 0901 	adc.w	r9, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb18 0303 	adds.w	r3, r8, r3
 8002c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c40:	462b      	mov	r3, r5
 8002c42:	eb49 0303 	adc.w	r3, r9, r3
 8002c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c5e:	460b      	mov	r3, r1
 8002c60:	18db      	adds	r3, r3, r3
 8002c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c64:	4613      	mov	r3, r2
 8002c66:	eb42 0303 	adc.w	r3, r2, r3
 8002c6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c74:	f7fd fac6 	bl	8000204 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4b61      	ldr	r3, [pc, #388]	@ (8002e04 <UART_SetConfig+0x2d4>)
 8002c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	011c      	lsls	r4, r3, #4
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ca8:	4641      	mov	r1, r8
 8002caa:	eb12 0a01 	adds.w	sl, r2, r1
 8002cae:	4649      	mov	r1, r9
 8002cb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc8:	4692      	mov	sl, r2
 8002cca:	469b      	mov	fp, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d0a:	f7fd fa7b 	bl	8000204 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	4b3b      	ldr	r3, [pc, #236]	@ (8002e04 <UART_SetConfig+0x2d4>)
 8002d16:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2264      	movs	r2, #100	@ 0x64
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	1acb      	subs	r3, r1, r3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d2a:	4b36      	ldr	r3, [pc, #216]	@ (8002e04 <UART_SetConfig+0x2d4>)
 8002d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d38:	441c      	add	r4, r3
 8002d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	1891      	adds	r1, r2, r2
 8002d52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d54:	415b      	adcs	r3, r3
 8002d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	1851      	adds	r1, r2, r1
 8002d60:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d62:	4649      	mov	r1, r9
 8002d64:	414b      	adcs	r3, r1
 8002d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d74:	4659      	mov	r1, fp
 8002d76:	00cb      	lsls	r3, r1, #3
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d7e:	4651      	mov	r1, sl
 8002d80:	00ca      	lsls	r2, r1, #3
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	4642      	mov	r2, r8
 8002d8a:	189b      	adds	r3, r3, r2
 8002d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d90:	464b      	mov	r3, r9
 8002d92:	460a      	mov	r2, r1
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002da8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002dac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002db0:	460b      	mov	r3, r1
 8002db2:	18db      	adds	r3, r3, r3
 8002db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db6:	4613      	mov	r3, r2
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002dc6:	f7fd fa1d 	bl	8000204 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <UART_SetConfig+0x2d4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	@ 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3332      	adds	r3, #50	@ 0x32
 8002de2:	4a08      	ldr	r2, [pc, #32]	@ (8002e04 <UART_SetConfig+0x2d4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002df8:	e106      	b.n	8003008 <UART_SetConfig+0x4d8>
 8002dfa:	bf00      	nop
 8002dfc:	40011000 	.word	0x40011000
 8002e00:	40011400 	.word	0x40011400
 8002e04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	1891      	adds	r1, r2, r2
 8002e20:	6239      	str	r1, [r7, #32]
 8002e22:	415b      	adcs	r3, r3
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e2a:	4641      	mov	r1, r8
 8002e2c:	1854      	adds	r4, r2, r1
 8002e2e:	4649      	mov	r1, r9
 8002e30:	eb43 0501 	adc.w	r5, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	00eb      	lsls	r3, r5, #3
 8002e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e42:	00e2      	lsls	r2, r4, #3
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e50:	464b      	mov	r3, r9
 8002e52:	eb45 0303 	adc.w	r3, r5, r3
 8002e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e76:	4629      	mov	r1, r5
 8002e78:	008b      	lsls	r3, r1, #2
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e80:	4621      	mov	r1, r4
 8002e82:	008a      	lsls	r2, r1, #2
 8002e84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e88:	f7fd f9bc 	bl	8000204 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b60      	ldr	r3, [pc, #384]	@ (8003014 <UART_SetConfig+0x4e4>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011c      	lsls	r4, r3, #4
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ea4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	61b9      	str	r1, [r7, #24]
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6139      	str	r1, [r7, #16]
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	460a      	mov	r2, r1
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f14:	4649      	mov	r1, r9
 8002f16:	008b      	lsls	r3, r1, #2
 8002f18:	4641      	mov	r1, r8
 8002f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1e:	4641      	mov	r1, r8
 8002f20:	008a      	lsls	r2, r1, #2
 8002f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f26:	f7fd f96d 	bl	8000204 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <UART_SetConfig+0x4e4>)
 8002f32:	fba3 2301 	umull	r2, r3, r3, r1
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2264      	movs	r2, #100	@ 0x64
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	1acb      	subs	r3, r1, r3
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	3332      	adds	r3, #50	@ 0x32
 8002f44:	4a33      	ldr	r2, [pc, #204]	@ (8003014 <UART_SetConfig+0x4e4>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f50:	441c      	add	r4, r3
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f70:	4641      	mov	r1, r8
 8002f72:	1851      	adds	r1, r2, r1
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	4649      	mov	r1, r9
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	00cb      	lsls	r3, r1, #3
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f92:	4651      	mov	r1, sl
 8002f94:	00ca      	lsls	r2, r1, #3
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	eb42 0303 	adc.w	r3, r2, r3
 8002faa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	008b      	lsls	r3, r1, #2
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fce:	4641      	mov	r1, r8
 8002fd0:	008a      	lsls	r2, r1, #2
 8002fd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fd6:	f7fd f915 	bl	8000204 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <UART_SetConfig+0x4e4>)
 8002fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	2164      	movs	r1, #100	@ 0x64
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	3332      	adds	r3, #50	@ 0x32
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <UART_SetConfig+0x4e4>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4422      	add	r2, r4
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800300e:	46bd      	mov	sp, r7
 8003010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003014:	51eb851f 	.word	0x51eb851f

08003018 <memset>:
 8003018:	4402      	add	r2, r0
 800301a:	4603      	mov	r3, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <__libc_init_array>:
 8003028:	b570      	push	{r4, r5, r6, lr}
 800302a:	4d0d      	ldr	r5, [pc, #52]	@ (8003060 <__libc_init_array+0x38>)
 800302c:	4c0d      	ldr	r4, [pc, #52]	@ (8003064 <__libc_init_array+0x3c>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	2600      	movs	r6, #0
 8003034:	42a6      	cmp	r6, r4
 8003036:	d109      	bne.n	800304c <__libc_init_array+0x24>
 8003038:	4d0b      	ldr	r5, [pc, #44]	@ (8003068 <__libc_init_array+0x40>)
 800303a:	4c0c      	ldr	r4, [pc, #48]	@ (800306c <__libc_init_array+0x44>)
 800303c:	f000 f818 	bl	8003070 <_init>
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	2600      	movs	r6, #0
 8003046:	42a6      	cmp	r6, r4
 8003048:	d105      	bne.n	8003056 <__libc_init_array+0x2e>
 800304a:	bd70      	pop	{r4, r5, r6, pc}
 800304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003050:	4798      	blx	r3
 8003052:	3601      	adds	r6, #1
 8003054:	e7ee      	b.n	8003034 <__libc_init_array+0xc>
 8003056:	f855 3b04 	ldr.w	r3, [r5], #4
 800305a:	4798      	blx	r3
 800305c:	3601      	adds	r6, #1
 800305e:	e7f2      	b.n	8003046 <__libc_init_array+0x1e>
 8003060:	080031ac 	.word	0x080031ac
 8003064:	080031ac 	.word	0x080031ac
 8003068:	080031ac 	.word	0x080031ac
 800306c:	080031b0 	.word	0x080031b0

08003070 <_init>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	bf00      	nop
 8003074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003076:	bc08      	pop	{r3}
 8003078:	469e      	mov	lr, r3
 800307a:	4770      	bx	lr

0800307c <_fini>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr
